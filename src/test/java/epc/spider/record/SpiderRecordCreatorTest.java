package epc.spider.record;

import org.testng.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import epc.beefeater.Authorizator;
import epc.beefeater.AuthorizatorImp;
import epc.metadataformat.data.DataGroup;
import epc.metadataformat.validator.DataValidator;
import epc.spider.data.SpiderDataAtomic;
import epc.spider.data.SpiderDataGroup;
import epc.spider.data.SpiderDataRecord;
import epc.spider.record.storage.RecordIdGenerator;
import epc.spider.record.storage.RecordStorage;
import epc.spider.record.storage.TimeStampIdGenerator;
import epc.spider.testdata.TestDataRecordInMemoryStorage;

public class SpiderRecordCreatorTest {
	private RecordStorage recordStorage;
	private Authorizator authorization;
	private RecordIdGenerator idGenerator;
	private PermissionKeyCalculator keyCalculator;
	private SpiderRecordCreator recordCreator;
	private DataValidator dataValidator;

	@BeforeMethod
	public void beforeMethod() {
		authorization = new AuthorizatorImp();
		dataValidator = new DataValidatorAlwaysValidSpy();
		recordStorage = TestDataRecordInMemoryStorage.createRecordStorageInMemoryWithTestData();
		idGenerator = new TimeStampIdGenerator();
		keyCalculator = new RecordPermissionKeyCalculator();
		recordCreator = SpiderRecordCreatorImp
				.usingAuthorizationAndDataValidatorAndRecordStorageAndIdGeneratorAndKeyCalculator(
						authorization, dataValidator, recordStorage, idGenerator, keyCalculator);

	}

	@Test(expectedExceptions = DataException.class)
	public void testCreateRecordInvalidData() {
		DataValidator dataValidator = new DataValidatorAlwaysInvalidSpy();
		SpiderRecordCreator recordCreator = SpiderRecordCreatorImp
				.usingAuthorizationAndDataValidatorAndRecordStorageAndIdGeneratorAndKeyCalculator(
						authorization, dataValidator, recordStorage, idGenerator, keyCalculator);
		SpiderDataGroup spiderDataGroup = SpiderDataGroup.withDataId("dataId");
		recordCreator.createAndStoreRecord("userId", "recordTypeAutoGeneratedId", spiderDataGroup);
	}
	
	@Test(expectedExceptions = DataException.class)
	public void testCreateRecordInvalidDataAutoGeneratedIdShouldNotHaveARecordInfo() {
		DataValidator dataValidator = new DataValidatorAlwaysValidSpy();
		SpiderRecordCreator recordCreator = SpiderRecordCreatorImp
				.usingAuthorizationAndDataValidatorAndRecordStorageAndIdGeneratorAndKeyCalculator(
						authorization, dataValidator, recordStorage, idGenerator, keyCalculator);
		SpiderDataGroup spiderDataGroup = SpiderDataGroup.withDataId("dataId");
		SpiderDataGroup createRecordInfo = SpiderDataGroup.withDataId("recordInfo");
		createRecordInfo.addChild(SpiderDataAtomic.withDataIdAndValue("id", "place"));
		spiderDataGroup.addChild(createRecordInfo);

		recordCreator.createAndStoreRecord("userId", "recordTypeAutoGeneratedId", spiderDataGroup);
	}
	@Test
	public void testCreateRecordAutogeneratedId() {
		RecordStorageCreateUpdateSpy recordStorage = new RecordStorageCreateUpdateSpy();
		recordCreator = SpiderRecordCreatorImp
				.usingAuthorizationAndDataValidatorAndRecordStorageAndIdGeneratorAndKeyCalculator(
						authorization, dataValidator, recordStorage, idGenerator, keyCalculator);

		SpiderDataGroup record = SpiderDataGroup.withDataId("typeWithAutoGeneratedId");

		SpiderDataRecord recordOut = recordCreator.createAndStoreRecord("userId",
				"typeWithAutoGeneratedId", record);
		SpiderDataGroup groupOut = recordOut.getSpiderDataGroup();
		SpiderDataGroup recordInfo = groupOut.extractGroup("recordInfo");
		String recordId = recordInfo.extractAtomicValue("id");

		Assert.assertNotNull(recordId, "A new record should have an id");

		Assert.assertEquals(recordInfo.extractAtomicValue("createdBy"), "userId");
		Assert.assertEquals(recordInfo.extractAtomicValue("type"), "typeWithAutoGeneratedId");

		DataGroup groupCreated = recordStorage.createRecord;
		Assert.assertEquals(groupOut.getDataId(), groupCreated.getDataId(),
				"Returned and read record should have the same dataId");
	}

	@Test
	public void testCreateRecordUserSuppliedId() {
		RecordStorageCreateUpdateSpy recordStorage = new RecordStorageCreateUpdateSpy();
		recordCreator = SpiderRecordCreatorImp
				.usingAuthorizationAndDataValidatorAndRecordStorageAndIdGeneratorAndKeyCalculator(
						authorization, dataValidator, recordStorage, idGenerator, keyCalculator);

		SpiderDataGroup record = SpiderDataGroup.withDataId("typeWithUserGeneratedId");
		SpiderDataGroup createRecordInfo = SpiderDataGroup.withDataId("recordInfo");
		createRecordInfo.addChild(SpiderDataAtomic.withDataIdAndValue("id", "place"));
		record.addChild(createRecordInfo);

		SpiderDataRecord recordOut = recordCreator.createAndStoreRecord("userId",
				"typeWithUserGeneratedId", record);
		SpiderDataGroup groupOut = recordOut.getSpiderDataGroup();
		SpiderDataGroup recordInfo = groupOut.extractGroup("recordInfo");
		String recordId = recordInfo.extractAtomicValue("id");
		Assert.assertNotNull(recordId, "A new record should have an id");

		Assert.assertEquals(recordInfo.extractAtomicValue("createdBy"), "userId");
		Assert.assertEquals(recordInfo.extractAtomicValue("type"), "typeWithUserGeneratedId");

		DataGroup groupCreated = recordStorage.createRecord;
		Assert.assertEquals(groupOut.getDataId(), groupCreated.getDataId(),
				"Returned and read record should have the same dataId");

	}

	@Test(expectedExceptions = AuthorizationException.class)
	public void testCreateRecordUnauthorized() {
		SpiderDataGroup record = SpiderDataGroup.withDataId("authority");
		recordCreator.createAndStoreRecord("unauthorizedUserId", "place", record);
	}

	@Test(expectedExceptions = DataException.class)
	public void testNonExistingRecordType() {
		SpiderDataGroup record = SpiderDataGroup.withDataId("authority");
		recordCreator.createAndStoreRecord("userId", "recordType_NOT_EXISTING", record);
	}
}
