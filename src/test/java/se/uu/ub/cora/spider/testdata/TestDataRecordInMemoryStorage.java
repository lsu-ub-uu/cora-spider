/*
 * Copyright 2015 Uppsala University Library
 *
 * This file is part of Cora.
 *
 *     Cora is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     Cora is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with Cora.  If not, see <http://www.gnu.org/licenses/>.
 */

package se.uu.ub.cora.spider.testdata;

import se.uu.ub.cora.bookkeeper.data.DataAtomic;
import se.uu.ub.cora.bookkeeper.data.DataGroup;
//import se.uu.ub.cora.bookkeeper.data.DataRecordLink;
import se.uu.ub.cora.spider.record.storage.RecordStorage;
import se.uu.ub.cora.spider.record.storage.RecordStorageInMemory;

public class TestDataRecordInMemoryStorage {

	private static String dataDivider = "cora";

	public static RecordStorageInMemory createRecordStorageInMemoryWithTestData() {
		RecordStorageInMemory recordsInMemory = new RecordStorageInMemory();
		addPlace(recordsInMemory);
		addSecondPlace(recordsInMemory);
		addThirdPlace(recordsInMemory);
		addFourthPlace(recordsInMemory);
		addMetadata(recordsInMemory);
		addPresentation(recordsInMemory);
		addText(recordsInMemory);
		addRecordType(recordsInMemory);
		addImageOne(recordsInMemory);
		addRecordTypeRecordType(recordsInMemory);
		addRecordTypeBinary(recordsInMemory);
		addRecordTypeImage(recordsInMemory);
		addRecordTypeRecordTypeAutoGeneratedId(recordsInMemory);
		addRecordTypePlace(recordsInMemory);
		addRecordTypeSearch(recordsInMemory);
		addSearch(recordsInMemory);
		addSearchWithTwoRecordTypeToSearchIn(recordsInMemory);
		addRecordTypeAbstractAuthority(recordsInMemory);
		addImage(recordsInMemory);

		DataGroup dummy = DataGroup.withNameInData("dummy");
		recordsInMemory.create("metadataCollectionVariable", "dummy1", dummy,
				DataGroup.withNameInData("collectedLinksList"), dataDivider);
		recordsInMemory.create("metadataCollectionVariableChild", "dummy1", dummy,
				DataGroup.withNameInData("dummy"), dataDivider);
		recordsInMemory.create("metadataItemCollection", "dummy1", dummy,
				DataGroup.withNameInData("collectedLinksList"), dataDivider);
		recordsInMemory.create("metadataCollectionItem", "dummy1", dummy,
				DataGroup.withNameInData("collectedLinksList"), dataDivider);
		recordsInMemory.create("metadataTextVariable", "dummy1", dummy,
				DataGroup.withNameInData("collectedLinksList"), dataDivider);
		recordsInMemory.create("metadataRecordLink", "dummy1", dummy,
				DataGroup.withNameInData("collectedLinksList"), dataDivider);
		recordsInMemory.create("metadataRecordRelation", "dummyRecordRelation", dummy,
				DataGroup.withNameInData("collectedLinksList"), dataDivider);
		recordsInMemory.create("permissionRole", "dummyPermissionRole", dummy,
				DataGroup.withNameInData("collectedLinksList"), dataDivider);
		return recordsInMemory;
	}

	private static void addPlace(RecordStorageInMemory recordsInMemory) {
		DataGroup recordInfo = DataCreator.createRecordInfoWithRecordTypeAndRecordId("place",
				"place:0001");
		DataGroup dataGroup = DataGroup.withNameInData("authority");
		dataGroup.addChild(recordInfo);
		recordsInMemory.create("place", "place:0001", dataGroup,
				DataGroup.withNameInData("collectedLinksList"), dataDivider);
	}

	private static void addSecondPlace(RecordStorage recordsInMemory) {
		DataGroup dataGroup = DataCreator.createRecordWithNameInDataAndIdAndTypeAndLinkedRecordId(
				"authority", "place:0002", "place", "cora").toDataGroup();

		DataGroup dataRecordLink = DataGroup.withNameInData("link");
		dataGroup.addChild(dataRecordLink);
		addLinkedRecordTypeAndLinkedRecordIdToRecordLink("place", "place:0001", dataRecordLink);

		DataGroup collectedLinksList = createLinkList();
		recordsInMemory.create("place", "place:0002", dataGroup, collectedLinksList, "cora");
	}

	private static void addThirdPlace(RecordStorage recordsInMemory) {
		DataGroup dataGroup = DataCreator.createRecordWithNameInDataAndIdAndTypeAndLinkedRecordId(
				"authority", "place:0003", "place", "cora").toDataGroup();

		DataGroup collectedLinksList = DataGroup.withNameInData("collectedLinksList");
		recordsInMemory.create("place", "place:0003", dataGroup, collectedLinksList, "cora");
	}

	private static void addFourthPlace(RecordStorage recordsInMemory) {
		DataGroup dataGroup = DataCreator.createRecordWithNameInDataAndIdAndTypeAndLinkedRecordId(
				"authority", "place:0004", "place", "cora").toDataGroup();

		DataGroup dataRecordLink = DataGroup.withNameInData("link");
		dataGroup.addChild(dataRecordLink);
		addLinkedRecordTypeAndLinkedRecordIdToRecordLink("authority", "place:0003", dataRecordLink);

		DataGroup collectedLinksList = DataGroup.withNameInData("collectedLinksList");
		DataGroup recordToRecordLink = DataGroup.withNameInData("recordToRecordLink");

		DataGroup from = DataGroup.withNameInData("from");
		recordToRecordLink.addChild(from);
		addLinkedRecordTypeAndLinkedRecordIdToRecordLink("place", "place:0004", from);
		DataGroup to = DataGroup.withNameInData("to");
		recordToRecordLink.addChild(to);
		addLinkedRecordTypeAndLinkedRecordIdToRecordLink("authority", "place:0003", to);

		collectedLinksList.addChild(recordToRecordLink);


		recordsInMemory.create("place", "place:0004", dataGroup, collectedLinksList, "cora");
	}

	private static void addLinkedRecordTypeAndLinkedRecordIdToRecordLink(
			String linkedRecordTypeString, String linkedRecordIdString, DataGroup dataRecordLink) {
		DataAtomic linkedRecordType = DataAtomic.withNameInDataAndValue("linkedRecordType",
				linkedRecordTypeString);
		dataRecordLink.addChild(linkedRecordType);

		DataAtomic linkedRecordId = DataAtomic.withNameInDataAndValue("linkedRecordId",
				linkedRecordIdString);
		dataRecordLink.addChild(linkedRecordId);
	}

	private static DataGroup createLinkList() {
		DataGroup collectedLinksList = DataGroup.withNameInData("collectedLinksList");
		DataGroup recordToRecordLink = DataGroup.withNameInData("recordToRecordLink");

		DataGroup from = DataGroup.withNameInData("from");
		recordToRecordLink.addChild(from);
		addLinkedRecordTypeAndLinkedRecordIdToRecordLink("place", "place:0002", from);
		DataGroup to = DataGroup.withNameInData("to");
		recordToRecordLink.addChild(to);
		addLinkedRecordTypeAndLinkedRecordIdToRecordLink("place", "place:0001", to);

		collectedLinksList.addChild(recordToRecordLink);
		return collectedLinksList;
	}

	private static void addMetadata(RecordStorageInMemory recordsInMemory) {
		String metadata = "metadataGroup";
		DataGroup dataGroup = DataGroup.withNameInData("metadata");

		DataGroup recordInfo = DataCreator.createRecordInfoWithRecordTypeAndRecordId(metadata,
				"place");
		dataGroup.addChild(recordInfo);
		recordsInMemory.create(metadata, "place", dataGroup,
				DataGroup.withNameInData("collectedLinksList"), dataDivider);
	}

	private static void addPresentation(RecordStorageInMemory recordsInMemory) {
		String presentation = "presentation";
		DataGroup dataGroup = DataGroup.withNameInData(presentation);

		DataGroup recordInfo = DataCreator.createRecordInfoWithRecordTypeAndRecordId(presentation,
				"placeView");
		dataGroup.addChild(recordInfo);

		recordsInMemory.create(presentation, "placeView", dataGroup,
				DataGroup.withNameInData("collectedLinksList"), dataDivider);
	}

	private static void addText(RecordStorageInMemory recordsInMemory) {
		String text = "text";
		DataGroup dataGroup = DataGroup.withNameInData("text");

		DataGroup recordInfo = DataCreator.createRecordInfoWithRecordTypeAndRecordId(text,
				"placeText");
		dataGroup.addChild(recordInfo);
		recordsInMemory.create(text, "placeText", dataGroup,
				DataGroup.withNameInData("collectedLinksList"), dataDivider);
	}

	private static void addRecordType(RecordStorageInMemory recordsInMemory) {
		String recordType = "recordType";
		DataGroup dataGroup = DataGroup.withNameInData(recordType);

		DataGroup recordInfo = DataCreator.createRecordInfoWithRecordTypeAndRecordId(recordType,
				"metadata");
		dataGroup.addChild(recordInfo);

		dataGroup.addChild(DataAtomic.withNameInDataAndValue("abstract", "false"));
		recordsInMemory.create(recordType, "metadata", dataGroup,
				DataGroup.withNameInData("collectedLinksList"), dataDivider);
	}

	private static void addRecordTypeRecordType(RecordStorageInMemory recordsInMemory) {
		String recordType = "recordType";
		DataGroup dataGroup = DataCreator
				.createRecordTypeWithIdAndUserSuppliedIdAndAbstract("recordType", "true", "false");
		recordsInMemory.create(recordType, "recordType", dataGroup,
				DataGroup.withNameInData("collectedLinksList"), dataDivider);
	}

	private static void addRecordTypeRecordTypeAutoGeneratedId(
			RecordStorageInMemory recordsInMemory) {
		String recordType = "recordType";
		DataGroup dataGroup = DataCreator.createRecordTypeWithIdAndUserSuppliedIdAndAbstract(
				"recordTypeAutoGeneratedId", "false", "false");
		recordsInMemory.create(recordType, "recordTypeAutoGeneratedId", dataGroup,
				DataGroup.withNameInData("collectedLinksList"), dataDivider);

	}

	private static void addRecordTypeBinary(RecordStorageInMemory recordsInMemory) {
		String recordType = "recordType";
		DataGroup dataGroup = DataCreator
				.createRecordTypeWithIdAndUserSuppliedIdAndAbstract("binary", "true", "true");
		recordsInMemory.create(recordType, "binary", dataGroup,
				DataGroup.withNameInData("collectedLinksList"), dataDivider);
	}

	private static void addRecordTypeImage(RecordStorageInMemory recordsInMemory) {
		String recordType = "recordType";
		DataGroup dataGroup = DataCreator
				.createRecordTypeWithIdAndUserSuppliedIdAndParentId("image", "true", "binary");
		recordsInMemory.create(recordType, "image", dataGroup,
				DataGroup.withNameInData("collectedLinksList"), dataDivider);
	}

	private static void addImageOne(RecordStorageInMemory recordsInMemory) {
		DataGroup dataGroup = DataCreator.createRecordWithNameInDataAndIdAndTypeAndLinkedRecordId(
				"image", "image:123456789", "image", "cora").toDataGroup();
		DataGroup resourceInfo = DataGroup.withNameInData("resourceInfo");
		dataGroup.addChild(resourceInfo);
		DataGroup master = DataGroup.withNameInData("master");
		resourceInfo.addChild(master);
		DataAtomic streamId = DataAtomic.withNameInDataAndValue("streamId", "123456789");
		master.addChild(streamId);
		DataAtomic uploadedFileName = DataAtomic.withNameInDataAndValue("filename", "adele.png");
		master.addChild(uploadedFileName);
		DataAtomic size = DataAtomic.withNameInDataAndValue("filesize", "123");
		master.addChild(size);
		DataAtomic mimeType = DataAtomic.withNameInDataAndValue("mimeType",
				"application/octet-stream");
		master.addChild(mimeType);
		recordsInMemory.create("image", "image:123456789", dataGroup,
				DataGroup.withNameInData("collectedLinksList"), dataDivider);
	}

	private static void addRecordTypePlace(RecordStorageInMemory recordsInMemory) {
		String recordType = "recordType";
		DataGroup dataGroup = DataCreator
				.createRecordTypeWithIdAndUserSuppliedIdAndParentId("place", "false", "authority");

		recordsInMemory.create(recordType, "place", dataGroup,
				DataGroup.withNameInData("collectedLinksList"), dataDivider);
	}

	private static void addRecordTypeSearch(RecordStorageInMemory recordsInMemory) {
		String recordType = "recordType";
		DataGroup dataGroup = DataCreator
				.createRecordTypeWithIdAndUserSuppliedIdAndAbstract("search", "true", "false");

		recordsInMemory.create(recordType, "search", dataGroup,
				DataGroup.withNameInData("collectedLinksList"), dataDivider);
	}

	private static void addSearch(RecordStorageInMemory recordsInMemory) {
		DataGroup recordInfo = DataCreator.createRecordInfoWithRecordTypeAndRecordId("search",
				"aSearchId");
		DataGroup dataGroup = DataGroup.withNameInData("search");
		dataGroup.addChild(recordInfo);

		DataGroup metadataId = DataGroup.withNameInData("metadataId");
		metadataId.addChild(DataAtomic.withNameInDataAndValue("linkedRecordType", "metadataGroup"));
		metadataId.addChild(
				DataAtomic.withNameInDataAndValue("linkedRecordId", "searchResourcesGroup"));
		dataGroup.addChild(metadataId);

		DataGroup recordTypeToSearchInGroup = DataGroup.withNameInData("recordTypeToSearchIn");
		dataGroup.addChild(recordTypeToSearchInGroup);
		recordTypeToSearchInGroup
				.addChild(DataAtomic.withNameInDataAndValue("linkedRecordType", "recordType"));
		recordTypeToSearchInGroup
				.addChild(DataAtomic.withNameInDataAndValue("linkedRecordId", "place"));
		recordsInMemory.create("search", "aSearchId", dataGroup,
				DataGroup.withNameInData("collectedLinksList"), dataDivider);
	}

	private static void addSearchWithTwoRecordTypeToSearchIn(
			RecordStorageInMemory recordsInMemory) {
		DataGroup recordInfo = DataCreator.createRecordInfoWithRecordTypeAndRecordId("search",
				"anotherSearchId");

		DataGroup dataGroup = DataGroup.withNameInData("search");
		dataGroup.addChild(recordInfo);
		DataGroup metadataId = DataGroup.withNameInData("metadataId");
		metadataId.addChild(DataAtomic.withNameInDataAndValue("linkedRecordType", "metadataGroup"));
		metadataId.addChild(
				DataAtomic.withNameInDataAndValue("linkedRecordId", "searchResourcesGroup"));
		dataGroup.addChild(metadataId);

		DataGroup recordTypeToSearchInGroup = DataGroup.withNameInData("recordTypeToSearchIn");
		dataGroup.addChild(recordTypeToSearchInGroup);
		recordTypeToSearchInGroup
				.addChild(DataAtomic.withNameInDataAndValue("linkedRecordType", "recordType"));
		recordTypeToSearchInGroup
				.addChild(DataAtomic.withNameInDataAndValue("linkedRecordId", "place"));

		DataGroup recordTypeToSearchInGroup2 = DataGroup.withNameInData("recordTypeToSearchIn");
		dataGroup.addChild(recordTypeToSearchInGroup2);
		recordTypeToSearchInGroup2
				.addChild(DataAtomic.withNameInDataAndValue("linkedRecordType", "recordType"));
		recordTypeToSearchInGroup2
				.addChild(DataAtomic.withNameInDataAndValue("linkedRecordId", "image"));

		recordsInMemory.create("search", "anotherSearchId", dataGroup,
				DataGroup.withNameInData("collectedLinksList"), dataDivider);
	}

	private static void addRecordTypeAbstractAuthority(RecordStorageInMemory recordsInMemory) {
		String recordType = "recordType";

		DataGroup dataGroup = DataCreator.createRecordTypeWithIdAndUserSuppliedIdAndAbstract(
				"abstractAuthority", "false", "true");

		recordsInMemory.create(recordType, "abstractAuthority", dataGroup,
				DataGroup.withNameInData("collectedLinksList"), dataDivider);
	}

	private static void addImage(RecordStorageInMemory recordsInMemory) {
		DataGroup recordInfo = DataCreator.createRecordInfoWithRecordTypeAndRecordId("image",
				"image:0001");
		DataGroup dataGroup = DataGroup.withNameInData("binary");
		dataGroup.addChild(recordInfo);
		recordsInMemory.create("image", "image:0001", dataGroup,
				DataGroup.withNameInData("collectedLinksList"), dataDivider);
	}
}
