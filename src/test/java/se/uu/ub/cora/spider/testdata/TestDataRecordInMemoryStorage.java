/*
 * Copyright 2015, 2019 Uppsala University Library
 *
 * This file is part of Cora.
 *
 *     Cora is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     Cora is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with Cora.  If not, see <http://www.gnu.org/licenses/>.
 */

package se.uu.ub.cora.spider.testdata;

import se.uu.ub.cora.data.DataAtomic;
import se.uu.ub.cora.data.DataGroup;
import se.uu.ub.cora.spider.data.DataAtomicSpy;
import se.uu.ub.cora.spider.data.DataGroupSpy;
import se.uu.ub.cora.spider.record.storage.RecordStorageInMemoryStub;
import se.uu.ub.cora.storage.RecordStorage;

public class TestDataRecordInMemoryStorage {

	private static String dataDivider = "cora";

	public static RecordStorageInMemoryStub createRecordStorageInMemoryWithTestData() {
		RecordStorageInMemoryStub recordsInMemory = new RecordStorageInMemoryStub();
		addPlace(recordsInMemory);
		addSecondPlace(recordsInMemory);
		addThirdPlace(recordsInMemory);
		addFourthPlace(recordsInMemory);
		addMetadata(recordsInMemory);
		addMetadataForBinary(recordsInMemory);
		addPresentation(recordsInMemory);
		addText(recordsInMemory);
		addRecordType(recordsInMemory);
		addImageOne(recordsInMemory);
		addRecordTypeRecordType(recordsInMemory);
		addRecordTypeBinary(recordsInMemory);
		addRecordTypeUser(recordsInMemory);
		addRecordTypeImage(recordsInMemory);
		addRecordTypeRecordTypeAutoGeneratedId(recordsInMemory);
		addRecordTypePlace(recordsInMemory);
		addRecordTypeSearch(recordsInMemory);
		addRecordTypeSystem(recordsInMemory);
		addSearch(recordsInMemory);
		addSystem(recordsInMemory);
		addSearchWithTwoRecordTypeToSearchIn(recordsInMemory);
		addRecordTypeAbstractAuthority(recordsInMemory);
		addImage(recordsInMemory);

		DataGroup dummy = new DataGroupSpy("dummy");
		recordsInMemory.create("metadataCollectionVariable", "dummy1", dummy, null,
				new DataGroupSpy("collectedLinksList"), dataDivider);
		recordsInMemory.create("metadataCollectionVariableChild", "dummy1", dummy, null,
				new DataGroupSpy("dummy"), dataDivider);
		recordsInMemory.create("metadataItemCollection", "dummy1", dummy, null,
				new DataGroupSpy("collectedLinksList"), dataDivider);
		recordsInMemory.create("metadataCollectionItem", "dummy1", dummy, null,
				new DataGroupSpy("collectedLinksList"), dataDivider);
		recordsInMemory.create("metadataTextVariable", "dummy1", dummy, null,
				new DataGroupSpy("collectedLinksList"), dataDivider);
		recordsInMemory.create("metadataRecordLink", "dummy1", dummy, null,
				new DataGroupSpy("collectedLinksList"), dataDivider);
		recordsInMemory.create("metadataRecordRelation", "dummyRecordRelation", dummy, null,
				new DataGroupSpy("collectedLinksList"), dataDivider);
		recordsInMemory.create("permissionRole", "dummyPermissionRole", dummy, null,
				new DataGroupSpy("collectedLinksList"), dataDivider);
		return recordsInMemory;
	}

	private static void addPlace(RecordStorageInMemoryStub recordsInMemory) {
		DataGroup recordInfo = DataCreator.createRecordInfoWithRecordTypeAndRecordId("place",
				"place:0001");
		DataGroup dataGroup = new DataGroupSpy("authority");
		dataGroup.addChild(recordInfo);
		recordsInMemory.create("place", "place:0001", dataGroup, null,
				new DataGroupSpy("collectedLinksList"), dataDivider);
	}

	private static void addSecondPlace(RecordStorage recordsInMemory) {
		DataGroup dataGroup = DataCreator2.createRecordWithNameInDataAndIdAndTypeAndLinkedRecordId(
				"authority", "place:0002", "place", "cora");

		DataGroup dataRecordLink = new DataGroupSpy("link");
		dataGroup.addChild(dataRecordLink);
		addLinkedRecordTypeAndLinkedRecordIdToRecordLink("place", "place:0001", dataRecordLink);

		DataGroup collectedLinksList = createLinkList();
		recordsInMemory.create("place", "place:0002", dataGroup, null, collectedLinksList, "cora");
	}

	private static void addThirdPlace(RecordStorage recordsInMemory) {
		DataGroup dataGroup = DataCreator.createRecordWithNameInDataAndIdAndTypeAndLinkedRecordId(
				"authority", "place:0003", "place", "cora").toDataGroup();

		DataGroup collectedLinksList = new DataGroupSpy("collectedLinksList");
		recordsInMemory.create("place", "place:0003", dataGroup, null, collectedLinksList, "cora");
	}

	private static void addFourthPlace(RecordStorage recordsInMemory) {
		DataGroup dataGroup = DataCreator2.createRecordWithNameInDataAndIdAndTypeAndLinkedRecordId(
				"authority", "place:0004", "place", "cora");

		DataGroup dataRecordLink = new DataGroupSpy("link");
		dataGroup.addChild(dataRecordLink);
		addLinkedRecordTypeAndLinkedRecordIdToRecordLink("authority", "place:0003", dataRecordLink);

		DataGroup collectedLinksList = new DataGroupSpy("collectedLinksList");
		DataGroup recordToRecordLink = new DataGroupSpy("recordToRecordLink");

		DataGroup from = new DataGroupSpy("from");
		recordToRecordLink.addChild(from);
		addLinkedRecordTypeAndLinkedRecordIdToRecordLink("place", "place:0004", from);
		DataGroup to = new DataGroupSpy("to");
		recordToRecordLink.addChild(to);
		addLinkedRecordTypeAndLinkedRecordIdToRecordLink("authority", "place:0003", to);

		collectedLinksList.addChild(recordToRecordLink);

		recordsInMemory.create("place", "place:0004", dataGroup, null, collectedLinksList, "cora");
	}

	private static void addLinkedRecordTypeAndLinkedRecordIdToRecordLink(
			String linkedRecordTypeString, String linkedRecordIdString, DataGroup dataRecordLink) {
		DataAtomic linkedRecordType = new DataAtomicSpy("linkedRecordType", linkedRecordTypeString);
		dataRecordLink.addChild(linkedRecordType);

		DataAtomic linkedRecordId = new DataAtomicSpy("linkedRecordId", linkedRecordIdString);
		dataRecordLink.addChild(linkedRecordId);
	}

	private static DataGroup createLinkList() {
		DataGroup collectedLinksList = new DataGroupSpy("collectedLinksList");
		DataGroup recordToRecordLink = new DataGroupSpy("recordToRecordLink");

		DataGroup from = new DataGroupSpy("from");
		recordToRecordLink.addChild(from);
		addLinkedRecordTypeAndLinkedRecordIdToRecordLink("place", "place:0002", from);
		DataGroup to = new DataGroupSpy("to");
		recordToRecordLink.addChild(to);
		addLinkedRecordTypeAndLinkedRecordIdToRecordLink("place", "place:0001", to);

		collectedLinksList.addChild(recordToRecordLink);
		return collectedLinksList;
	}

	private static void addMetadata(RecordStorageInMemoryStub recordsInMemory) {
		String metadata = "metadataGroup";
		DataGroup dataGroup = new DataGroupSpy("metadata");

		DataGroup recordInfo = DataCreator.createRecordInfoWithRecordTypeAndRecordId(metadata,
				"place");
		dataGroup.addChild(recordInfo);
		recordsInMemory.create(metadata, "place", dataGroup, null,
				new DataGroupSpy("collectedLinksList"), dataDivider);
	}

	private static void addMetadataForBinary(RecordStorageInMemoryStub recordsInMemory) {
		String metadata = "metadataGroup";
		DataGroup dataGroup = new DataGroupSpy("metadata");

		DataGroup recordInfo = DataCreator.createRecordInfoWithRecordTypeAndRecordId(metadata,
				"binary");
		dataGroup.addChild(recordInfo);
		recordsInMemory.create(metadata, "binary", dataGroup, null,
				new DataGroupSpy("collectedLinksList"), dataDivider);
	}

	private static void addPresentation(RecordStorageInMemoryStub recordsInMemory) {
		String presentation = "presentation";
		DataGroup dataGroup = new DataGroupSpy(presentation);

		DataGroup recordInfo = DataCreator.createRecordInfoWithRecordTypeAndRecordId(presentation,
				"placeView");
		dataGroup.addChild(recordInfo);

		recordsInMemory.create(presentation, "placeView", dataGroup, null,
				new DataGroupSpy("collectedLinksList"), dataDivider);
	}

	private static void addText(RecordStorageInMemoryStub recordsInMemory) {
		String text = "text";
		DataGroup dataGroup = new DataGroupSpy("text");

		DataGroup recordInfo = DataCreator.createRecordInfoWithRecordTypeAndRecordId(text,
				"placeText");
		dataGroup.addChild(recordInfo);
		recordsInMemory.create(text, "placeText", dataGroup, null,
				new DataGroupSpy("collectedLinksList"), dataDivider);
	}

	private static void addRecordType(RecordStorageInMemoryStub recordsInMemory) {
		String recordType = "recordType";
		DataGroup dataGroup = new DataGroupSpy(recordType);

		DataGroup recordInfo = DataCreator.createRecordInfoWithRecordTypeAndRecordId(recordType,
				"metadata");
		dataGroup.addChild(recordInfo);

		dataGroup.addChild(new DataAtomicSpy("abstract", "false"));
		recordsInMemory.create(recordType, "metadata", dataGroup, null,
				new DataGroupSpy("collectedLinksList"), dataDivider);
	}

	private static void addRecordTypeRecordType(RecordStorageInMemoryStub recordsInMemory) {
		String recordType = "recordType";
		DataGroup dataGroup = DataCreator
				.createRecordTypeWithIdAndUserSuppliedIdAndAbstractAndPublicRead("recordType",
						"true", "false", "false");
		recordsInMemory.create(recordType, "recordType", dataGroup, null,
				new DataGroupSpy("collectedLinksList"), dataDivider);
	}

	private static void addRecordTypeRecordTypeAutoGeneratedId(
			RecordStorageInMemoryStub recordsInMemory) {
		String recordType = "recordType";
		DataGroup dataGroup = DataCreator
				.createRecordTypeWithIdAndUserSuppliedIdAndAbstractAndPublicRead(
						"recordTypeAutoGeneratedId", "false", "false", "false");
		recordsInMemory.create(recordType, "recordTypeAutoGeneratedId", dataGroup, null,
				new DataGroupSpy("collectedLinksList"), dataDivider);

	}

	private static void addRecordTypeBinary(RecordStorageInMemoryStub recordsInMemory) {
		String recordType = "recordType";
		DataGroup dataGroup = DataCreator
				.createRecordTypeWithIdAndUserSuppliedIdAndAbstractAndPublicRead("binary", "true",
						"true", "false");
		recordsInMemory.create(recordType, "binary", dataGroup, null,
				new DataGroupSpy("collectedLinksList"), dataDivider);
	}

	private static void addRecordTypeUser(RecordStorageInMemoryStub recordsInMemory) {
		String recordType = "recordType";
		DataGroup dataGroup = DataCreator
				.createRecordTypeWithIdAndUserSuppliedIdAndAbstractAndPublicRead("user", "true",
						"false", "false");
		recordsInMemory.create(recordType, "user", dataGroup, null,
				new DataGroupSpy("collectedLinksList"), dataDivider);
	}

	private static void addRecordTypeImage(RecordStorageInMemoryStub recordsInMemory) {
		String recordType = "recordType";
		DataGroup dataGroup = DataCreator
				.createRecordTypeWithIdAndUserSuppliedIdAndParentId("image", "true", "binary");
		recordsInMemory.create(recordType, "image", dataGroup, null,
				new DataGroupSpy("collectedLinksList"), dataDivider);
	}

	private static void addImageOne(RecordStorageInMemoryStub recordsInMemory) {
		DataGroup dataGroup = DataCreator.createRecordWithNameInDataAndIdAndTypeAndLinkedRecordId(
				"image", "image:123456789", "image", "cora").toDataGroup();
		DataGroup resourceInfo = new DataGroupSpy("resourceInfo");
		dataGroup.addChild(resourceInfo);
		DataGroup master = new DataGroupSpy("master");
		resourceInfo.addChild(master);
		DataAtomic streamId = new DataAtomicSpy("streamId", "678912345");
		master.addChild(streamId);
		DataAtomic uploadedFileName = new DataAtomicSpy("filename", "adele.png");
		master.addChild(uploadedFileName);
		DataAtomic size = new DataAtomicSpy("filesize", "123");
		master.addChild(size);
		DataAtomic mimeType = new DataAtomicSpy("mimeType", "application/octet-stream");
		master.addChild(mimeType);
		recordsInMemory.create("image", "image:123456789", dataGroup, null,
				new DataGroupSpy("collectedLinksList"), dataDivider);
	}

	private static void addRecordTypePlace(RecordStorageInMemoryStub recordsInMemory) {
		String recordType = "recordType";
		DataGroup dataGroup = DataCreator
				.createRecordTypeWithIdAndUserSuppliedIdAndParentId("place", "false", "authority");

		DataGroup filter = new DataGroupSpy("filter");
		filter.addChild(new DataAtomicSpy("linkedRecordType", "metadataGroup"));
		filter.addChild(new DataAtomicSpy("linkedRecordId", "placeFilterGroup"));
		dataGroup.addChild(filter);

		recordsInMemory.create(recordType, "place", dataGroup, null,
				new DataGroupSpy("collectedLinksList"), dataDivider);
	}

	private static void addRecordTypeSearch(RecordStorageInMemoryStub recordsInMemory) {
		String recordType = "recordType";
		DataGroup dataGroup = DataCreator
				.createRecordTypeWithIdAndUserSuppliedIdAndAbstractAndPublicRead("search", "true",
						"false", "false");

		recordsInMemory.create(recordType, "search", dataGroup, null,
				new DataGroupSpy("collectedLinksList"), dataDivider);
	}

	private static void addSearch(RecordStorageInMemoryStub recordsInMemory) {
		DataGroup recordInfo = DataCreator.createRecordInfoWithRecordTypeAndRecordId("search",
				"aSearchId");
		DataGroup dataGroup = new DataGroupSpy("search");
		dataGroup.addChild(recordInfo);

		DataGroup metadataId = new DataGroupSpy("metadataId");
		metadataId.addChild(new DataAtomicSpy("linkedRecordType", "metadataGroup"));
		metadataId.addChild(new DataAtomicSpy("linkedRecordId", "searchResourcesGroup"));
		dataGroup.addChild(metadataId);

		DataGroup recordTypeToSearchInGroup = new DataGroupSpy("recordTypeToSearchIn");
		dataGroup.addChild(recordTypeToSearchInGroup);
		recordTypeToSearchInGroup.addChild(new DataAtomicSpy("linkedRecordType", "recordType"));
		recordTypeToSearchInGroup.addChild(new DataAtomicSpy("linkedRecordId", "place"));
		recordsInMemory.create("search", "aSearchId", dataGroup, null,
				new DataGroupSpy("collectedLinksList"), dataDivider);
	}

	private static void addSearchWithTwoRecordTypeToSearchIn(
			RecordStorageInMemoryStub recordsInMemory) {
		DataGroup recordInfo = DataCreator.createRecordInfoWithRecordTypeAndRecordId("search",
				"anotherSearchId");

		DataGroup dataGroup = new DataGroupSpy("search");
		dataGroup.addChild(recordInfo);
		DataGroup metadataId = new DataGroupSpy("metadataId");
		metadataId.addChild(new DataAtomicSpy("linkedRecordType", "metadataGroup"));
		metadataId.addChild(new DataAtomicSpy("linkedRecordId", "searchResourcesGroup"));
		dataGroup.addChild(metadataId);

		DataGroup recordTypeToSearchInGroup = new DataGroupSpy("recordTypeToSearchIn");
		dataGroup.addChild(recordTypeToSearchInGroup);
		recordTypeToSearchInGroup.addChild(new DataAtomicSpy("linkedRecordType", "recordType"));
		recordTypeToSearchInGroup.addChild(new DataAtomicSpy("linkedRecordId", "place"));

		DataGroup recordTypeToSearchInGroup2 = new DataGroupSpy("recordTypeToSearchIn");
		dataGroup.addChild(recordTypeToSearchInGroup2);
		recordTypeToSearchInGroup2.addChild(new DataAtomicSpy("linkedRecordType", "recordType"));
		recordTypeToSearchInGroup2.addChild(new DataAtomicSpy("linkedRecordId", "image"));

		recordsInMemory.create("search", "anotherSearchId", dataGroup, null,
				new DataGroupSpy("collectedLinksList"), dataDivider);
	}

	private static void addRecordTypeAbstractAuthority(RecordStorageInMemoryStub recordsInMemory) {
		String recordType = "recordType";

		DataGroup dataGroup = DataCreator
				.createRecordTypeWithIdAndUserSuppliedIdAndAbstractAndPublicRead(
						"abstractAuthority", "false", "true", "false");

		recordsInMemory.create(recordType, "abstractAuthority", dataGroup, null,
				new DataGroupSpy("collectedLinksList"), dataDivider);
	}

	private static void addImage(RecordStorageInMemoryStub recordsInMemory) {
		DataGroup recordInfo = DataCreator.createRecordInfoWithRecordTypeAndRecordId("image",
				"image:0001");
		DataGroup dataGroup = new DataGroupSpy("binary");
		dataGroup.addChild(recordInfo);
		recordsInMemory.create("image", "image:0001", dataGroup, null,
				new DataGroupSpy("collectedLinksList"), dataDivider);
	}

	private static void addRecordTypeSystem(RecordStorageInMemoryStub recordsInMemory) {
		String recordType = "recordType";
		DataGroup dataGroup = DataCreator
				.createRecordTypeWithIdAndUserSuppliedIdAndAbstractAndPublicRead("system", "true",
						"false", "false");

		recordsInMemory.create(recordType, "system", dataGroup, null,
				new DataGroupSpy("collectedLinksList"), dataDivider);
	}

	private static void addSystem(RecordStorageInMemoryStub recordsInMemory) {
		DataGroup dataGroup = new DataGroupSpy("system");
		DataGroup recordInfo = DataCreator.createRecordInfoWithRecordTypeAndRecordId("system",
				"cora");
		dataGroup.addChild(recordInfo);
		dataGroup.addChild(new DataAtomicSpy("systemName", "cora"));

		recordsInMemory.create("system", "cora", dataGroup, null,
				new DataGroupSpy("collectedLinksList"), dataDivider);
	}
}
