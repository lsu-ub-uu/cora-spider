/*
 * Copyright 2015 Uppsala University Library
 *
 * This file is part of Cora.
 *
 *     Cora is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     Cora is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with Cora.  If not, see <http://www.gnu.org/licenses/>.
 */

package se.uu.ub.cora.spider.testdata;

import se.uu.ub.cora.bookkeeper.data.DataAtomic;
import se.uu.ub.cora.bookkeeper.data.DataGroup;
//import se.uu.ub.cora.bookkeeper.data.DataRecordLink;
import se.uu.ub.cora.spider.record.storage.RecordStorage;
import se.uu.ub.cora.spider.record.storage.RecordStorageInMemory;

public class TestDataRecordInMemoryStorage {

	public static RecordStorageInMemory createRecordStorageInMemoryWithTestData() {
		RecordStorageInMemory recordsInMemory = new RecordStorageInMemory();
		addPlace(recordsInMemory);
		addSecondPlace(recordsInMemory);
		addMetadata(recordsInMemory);
		addPresentation(recordsInMemory);
		addText(recordsInMemory);
		addRecordType(recordsInMemory);
		addRecordTypeRecordType(recordsInMemory);
		addRecordTypeRecordTypeAutoGeneratedId(recordsInMemory);
		addRecordTypePlace(recordsInMemory);
		addRecordTypeAbstractAuthority(recordsInMemory);

		DataGroup dummy = DataGroup.withNameInData("dummy");
		recordsInMemory.create("metadataCollectionVariable", "dummy1", dummy,
				DataGroup.withNameInData("collectedLinksList"));
		recordsInMemory.create("metadataCollectionVariableChild", "dummy1", dummy,
				DataGroup.withNameInData("dummy"));
		recordsInMemory.create("metadataItemCollection", "dummy1", dummy,
				DataGroup.withNameInData("collectedLinksList"));
		recordsInMemory.create("metadataCollectionItem", "dummy1", dummy,
				DataGroup.withNameInData("collectedLinksList"));
		recordsInMemory.create("metadataTextVariable", "dummy1", dummy,
				DataGroup.withNameInData("collectedLinksList"));
		recordsInMemory.create("metadataRecordLink", "dummy1", dummy,
				DataGroup.withNameInData("collectedLinksList"));
		return recordsInMemory;
	}

	private static void addPlace(RecordStorageInMemory recordsInMemory) {
		DataGroup recordInfo = DataCreator.createRecordInfoWithRecordTypeAndRecordId("place",
				"place:0001");
		DataGroup dataGroup = DataGroup.withNameInData("authority");
		dataGroup.addChild(recordInfo);
		recordsInMemory.create("place", "place:0001", dataGroup,
				DataGroup.withNameInData("collectedLinksList"));
	}

	private static void addSecondPlace(RecordStorage recordsInMemory) {
		DataGroup recordInfo = DataCreator.createRecordInfoWithRecordTypeAndRecordId("place",
				"place:0002");

		DataGroup dataGroup = DataGroup.withNameInData("authority");
		dataGroup.addChild(recordInfo);

		DataGroup dataRecordLink = DataGroup.withNameInData("link");
		dataGroup.addChild(dataRecordLink);
		addLinkedRecordTypeAndLinkedRecordIdToRecordLink("place", "place:0001", dataRecordLink);

//		dataGroup.addChild(DataRecordLink.withNameInDataAndLinkedRecordTypeAndLinkedRecordId("link",
//				"place", "place:0001"));

		DataGroup collectedLinksList = createLinkList();
		recordsInMemory.create("place", "place:0002", dataGroup, collectedLinksList);
	}

	private static void addLinkedRecordTypeAndLinkedRecordIdToRecordLink(String linkedRecordTypeString, String linkedRecordIdString, DataGroup dataRecordLink) {
		DataAtomic linkedRecordType = DataAtomic.withNameInDataAndValue("linkedRecordType", linkedRecordTypeString);
		dataRecordLink.addChild(linkedRecordType);


		DataAtomic linkedRecordId = DataAtomic.withNameInDataAndValue("linkedRecordId", linkedRecordIdString);
		dataRecordLink.addChild(linkedRecordId);
	}

	private static DataGroup createLinkList() {
		DataGroup collectedLinksList = DataGroup.withNameInData("collectedLinksList");
		DataGroup recordToRecordLink = DataGroup.withNameInData("recordToRecordLink");

		DataGroup from = DataGroup.withNameInData("from");
		recordToRecordLink.addChild(from);
		addLinkedRecordTypeAndLinkedRecordIdToRecordLink("place", "place:0002", from);
//		DataRecordLink from = DataRecordLink
//				.withNameInDataAndLinkedRecordTypeAndLinkedRecordId("from", "place", "place:0002");
		DataGroup to = DataGroup.withNameInData("to");
		recordToRecordLink.addChild(to);
		addLinkedRecordTypeAndLinkedRecordIdToRecordLink("place", "place:0001", to);

//		DataRecordLink to = DataRecordLink.withNameInDataAndLinkedRecordTypeAndLinkedRecordId("to",
//				"place", "place:0001");
//		recordToRecordLink.addChild(to);

		collectedLinksList.addChild(recordToRecordLink);
		return collectedLinksList;
	}

	private static void addMetadata(RecordStorageInMemory recordsInMemory) {
		String metadata = "metadataGroup";
		DataGroup dataGroup = DataGroup.withNameInData("metadata");

		DataGroup recordInfo = DataCreator.createRecordInfoWithRecordTypeAndRecordId(metadata,
				"place");
		dataGroup.addChild(recordInfo);
		recordsInMemory.create(metadata, "place", dataGroup,
				DataGroup.withNameInData("collectedLinksList"));
	}

	private static void addPresentation(RecordStorageInMemory recordsInMemory) {
		String presentation = "presentation";
		DataGroup dataGroup = DataGroup.withNameInData(presentation);

		DataGroup recordInfo = DataCreator.createRecordInfoWithRecordTypeAndRecordId(presentation,
				"placeView");
		dataGroup.addChild(recordInfo);

		recordsInMemory.create(presentation, "placeView", dataGroup,
				DataGroup.withNameInData("collectedLinksList"));
	}

	private static void addText(RecordStorageInMemory recordsInMemory) {
		String text = "text";
		DataGroup dataGroup = DataGroup.withNameInData("text");

		DataGroup recordInfo = DataCreator.createRecordInfoWithRecordTypeAndRecordId(text,
				"placeText");
		dataGroup.addChild(recordInfo);
		recordsInMemory.create(text, "placeText", dataGroup,
				DataGroup.withNameInData("collectedLinksList"));
	}

	private static void addRecordType(RecordStorageInMemory recordsInMemory) {
		String recordType = "recordType";
		DataGroup dataGroup = DataGroup.withNameInData(recordType);

		DataGroup recordInfo = DataCreator.createRecordInfoWithRecordTypeAndRecordId(recordType,
				"metadata");
		dataGroup.addChild(recordInfo);

		dataGroup.addChild(DataAtomic.withNameInDataAndValue("abstract", "false"));
		recordsInMemory.create(recordType, "metadata", dataGroup,
				DataGroup.withNameInData("collectedLinksList"));
	}

	private static void addRecordTypeRecordType(RecordStorageInMemory recordsInMemory) {
		String recordType = "recordType";
		DataGroup dataGroup = DataCreator
				.createRecordTypeWithIdAndUserSuppliedIdAndAbstract("recordType", "true", "false");
		recordsInMemory.create(recordType, "recordType", dataGroup,
				DataGroup.withNameInData("collectedLinksList"));
	}

	private static void addRecordTypeRecordTypeAutoGeneratedId(
			RecordStorageInMemory recordsInMemory) {
		String recordType = "recordType";
		DataGroup dataGroup = DataCreator.createRecordTypeWithIdAndUserSuppliedIdAndAbstract(
				"recordTypeAutoGeneratedId", "false", "false");
		recordsInMemory.create(recordType, "recordTypeAutoGeneratedId", dataGroup,
				DataGroup.withNameInData("collectedLinksList"));

	}

	private static void addRecordTypePlace(RecordStorageInMemory recordsInMemory) {
		String recordType = "recordType";

		DataGroup dataGroup = DataCreator
				.createRecordTypeWithIdAndUserSuppliedIdAndAbstract("place", "false", "false");

		recordsInMemory.create(recordType, "place", dataGroup,
				DataGroup.withNameInData("collectedLinksList"));
	}

	private static void addRecordTypeAbstractAuthority(RecordStorageInMemory recordsInMemory) {
		String recordType = "recordType";

		DataGroup dataGroup = DataCreator
				.createRecordTypeWithIdAndUserSuppliedIdAndAbstract("abstractAuthority", "false", "true");

		recordsInMemory.create(recordType, "abstractAuthority", dataGroup,
				DataGroup.withNameInData("collectedLinksList"));
	}
}
