/*
 * Copyright 2015 Uppsala University Library
 *
 * This file is part of Cora.
 *
 *     Cora is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     Cora is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with Cora.  If not, see <http://www.gnu.org/licenses/>.
 */

package se.uu.ub.cora.spider.record;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertTrue;

import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import se.uu.ub.cora.beefeater.Authorizator;
import se.uu.ub.cora.beefeater.AuthorizatorImp;
import se.uu.ub.cora.bookkeeper.data.DataGroup;
import se.uu.ub.cora.bookkeeper.linkcollector.DataRecordLinkCollector;
import se.uu.ub.cora.bookkeeper.validator.DataValidator;
import se.uu.ub.cora.spider.data.Action;
import se.uu.ub.cora.spider.data.DataMissingException;
import se.uu.ub.cora.spider.data.SpiderDataAtomic;
import se.uu.ub.cora.spider.data.SpiderDataGroup;
import se.uu.ub.cora.spider.data.SpiderDataRecord;
import se.uu.ub.cora.spider.record.storage.RecordNotFoundException;
import se.uu.ub.cora.spider.record.storage.RecordStorage;
import se.uu.ub.cora.spider.spy.AuthorizatorAlwaysAuthorizedSpy;
import se.uu.ub.cora.spider.spy.DataRecordLinkCollectorSpy;
import se.uu.ub.cora.spider.spy.DataValidatorAlwaysInvalidSpy;
import se.uu.ub.cora.spider.spy.DataValidatorAlwaysValidSpy;
import se.uu.ub.cora.spider.spy.KeyCalculatorSpy;
import se.uu.ub.cora.spider.spy.RecordPermissionKeyCalculatorStub;
import se.uu.ub.cora.spider.spy.RecordStorageCreateUpdateSpy;
import se.uu.ub.cora.spider.spy.RecordStorageSpy;
import se.uu.ub.cora.spider.testdata.DataCreator;
import se.uu.ub.cora.spider.testdata.RecordLinkTestsDataCreator;
import se.uu.ub.cora.spider.testdata.SpiderDataCreator;
import se.uu.ub.cora.spider.testdata.TestDataRecordInMemoryStorage;

public class SpiderRecordUpdaterTest {
	private RecordStorage recordStorage;
	private Authorizator authorization;
	private PermissionKeyCalculator keyCalculator;
	private SpiderRecordUpdater recordUpdater;
	private DataValidator dataValidator;
	private DataRecordLinkCollector linkCollector;

	@BeforeMethod
	public void beforeMethod() {
		authorization = new AuthorizatorImp();
		dataValidator = new DataValidatorAlwaysValidSpy();
		recordStorage = TestDataRecordInMemoryStorage.createRecordStorageInMemoryWithTestData();
		keyCalculator = new RecordPermissionKeyCalculatorStub();
		linkCollector = new DataRecordLinkCollectorSpy();
		recordUpdater = SpiderRecordUpdaterImp
				.usingAuthorizationAndDataValidatorAndRecordStorageAndKeyCalculatorAndLinkCollector(
						authorization, dataValidator, recordStorage, keyCalculator, linkCollector);

	}

	@Test
	public void testExternalDependenciesAreCalled() {
		authorization = new AuthorizatorAlwaysAuthorizedSpy();
		dataValidator = new DataValidatorAlwaysValidSpy();
		recordStorage = new RecordStorageSpy();
		keyCalculator = new KeyCalculatorSpy();
		linkCollector = new DataRecordLinkCollectorSpy();

		SpiderRecordUpdater recordUpdater = SpiderRecordUpdaterImp
				.usingAuthorizationAndDataValidatorAndRecordStorageAndKeyCalculatorAndLinkCollector(
						authorization, dataValidator, recordStorage, keyCalculator, linkCollector);
		SpiderDataGroup spiderDataGroup = SpiderDataGroup.withNameInData("nameInData");
		spiderDataGroup.addChild(
				SpiderDataCreator.createRecordInfoWithRecordTypeAndRecordIdAndDataDivider("spyType",
						"spyId", "cora"));
		recordUpdater.updateRecord("userId", "spyType", "spyId", spiderDataGroup);

		assertTrue(((AuthorizatorAlwaysAuthorizedSpy) authorization).authorizedWasCalled);
		assertTrue(((DataValidatorAlwaysValidSpy) dataValidator).validateDataWasCalled);
		assertTrue(((RecordStorageSpy) recordStorage).updateWasCalled);
		assertTrue(((KeyCalculatorSpy) keyCalculator).calculateKeysWasCalled);
		assertTrue(((DataRecordLinkCollectorSpy) linkCollector).collectLinksWasCalled);
	}

	@Test
	public void testUpdateRecord() {
		RecordStorageCreateUpdateSpy recordStorage = new RecordStorageCreateUpdateSpy();
		setRecordUpdaterWithrecordStorage(recordStorage);

		SpiderDataGroup dataGroup = getSpiderDataGroupToUpdate();

		SpiderDataRecord recordUpdated = recordUpdater.updateRecord("userId",
				"typeWithAutoGeneratedId", "somePlace", dataGroup);
		SpiderDataGroup groupUpdated = recordUpdated.getSpiderDataGroup();

		assertEquals(groupUpdated.extractAtomicValue("atomicId"), "atomicValue");

		DataGroup groupCreated = recordStorage.updateRecord;
		assertEquals(groupCreated.getFirstAtomicValueWithNameInData("atomicId"), "atomicValue");
	}

	private void setRecordUpdaterWithrecordStorage(RecordStorageCreateUpdateSpy recordStorage) {
		recordUpdater = SpiderRecordUpdaterImp
				.usingAuthorizationAndDataValidatorAndRecordStorageAndKeyCalculatorAndLinkCollector(
						authorization, dataValidator, recordStorage, keyCalculator, linkCollector);
	}

	private SpiderDataGroup getSpiderDataGroupToUpdate() {
		SpiderDataGroup dataGroup = SpiderDataGroup.withNameInData("typeWithUserGeneratedId");
		SpiderDataGroup createRecordInfo = DataCreator
				.createRecordInfoWithIdAndLinkedRecordId("somePlace", "cora");
		createRecordInfo.addChild(
				SpiderDataAtomic.withNameInDataAndValue("type", "typeWithAutoGeneratedId"));
		dataGroup.addChild(createRecordInfo);
		dataGroup.addChild(SpiderDataAtomic.withNameInDataAndValue("atomicId", "atomicValue"));
		return dataGroup;
	}

	@Test
	public void testUpdateRecordDataDividerExtractedFromData() {
		RecordStorageCreateUpdateSpy recordStorage = new RecordStorageCreateUpdateSpy();
		setRecordUpdaterWithrecordStorage(recordStorage);

		SpiderDataGroup dataGroup = getSpiderDataGroupToUpdate();

		recordUpdater.updateRecord("userId", "typeWithAutoGeneratedId", "somePlace", dataGroup);

		assertEquals(recordStorage.dataDivider, "cora");
	}

	@Test
	public void testActionsOnUpdatedRecord() {
		RecordStorageCreateUpdateSpy recordStorage = new RecordStorageCreateUpdateSpy();
		recordStorage.modifiableLinksExistsForRecord = true;
		setRecordUpdaterWithrecordStorage(recordStorage);

		SpiderDataGroup dataGroup = getSpiderDataGroupToUpdate();
		SpiderDataRecord recordUpdated = recordUpdater.updateRecord("userId",
				"typeWithAutoGeneratedId", "somePlace", dataGroup);
		assertEquals(recordUpdated.getActions().size(), 4);
		assertReadUpdateDelete(recordUpdated);
		assertTrue(recordUpdated.getActions().contains(Action.READ_INCOMING_LINKS));
	}

	@Test
	public void testActionsOnUpdatedRecordNoIncomingLinks() {
		RecordStorageCreateUpdateSpy recordStorage = new RecordStorageCreateUpdateSpy();
		setRecordUpdaterWithrecordStorage(recordStorage);

		SpiderDataGroup dataGroup = getSpiderDataGroupToUpdate();
		SpiderDataRecord recordUpdated = recordUpdater.updateRecord("userId",
				"typeWithAutoGeneratedId", "somePlace", dataGroup);
		assertEquals(recordUpdated.getActions().size(), 3);
	}

	@Test
	public void testActionsOnUpdatedRecordTypeImageNoIncomingLinks() {
		RecordStorageCreateUpdateSpy recordStorage = new RecordStorageCreateUpdateSpy();
		setRecordUpdaterWithrecordStorage(recordStorage);

		SpiderDataGroup dataGroup = createRecordTypeDataGroupWithIdAndAbstract("image", "false");
		dataGroup.addChild(SpiderDataAtomic.withNameInDataAndValue("parentId", "binary"));

		SpiderDataRecord recordUpdated = recordUpdater.updateRecord("userId", "recordType", "image",
				dataGroup);
		assertEquals(recordUpdated.getActions().size(), 7);
		assertReadUpdateDelete(recordUpdated);
		assertTrue(recordUpdated.getActions().contains(Action.CREATE));

		assertTrue(recordUpdated.getActions().contains(Action.LIST));
		assertTrue(recordUpdated.getActions().contains(Action.SEARCH));
		assertTrue(recordUpdated.getActions().contains(Action.CREATE_BY_UPLOAD));
	}

	private SpiderDataGroup createRecordTypeDataGroupWithIdAndAbstract(String id,
			String abstractString) {
		SpiderDataGroup dataGroup = SpiderDataGroup.withNameInData("recordType");
		SpiderDataGroup createRecordInfo = DataCreator.createRecordInfoWithIdAndLinkedRecordId(id,
				"cora");
		createRecordInfo.addChild(SpiderDataAtomic.withNameInDataAndValue("type", "recordType"));
		dataGroup.addChild(createRecordInfo);
		dataGroup.addChild(SpiderDataAtomic.withNameInDataAndValue("abstract", abstractString));
		return dataGroup;
	}

	private void assertReadUpdateDelete(SpiderDataRecord recordUpdated) {
		assertTrue(recordUpdated.getActions().contains(Action.READ));
		assertTrue(recordUpdated.getActions().contains(Action.UPDATE));
		assertTrue(recordUpdated.getActions().contains(Action.DELETE));
	}

	@Test
	public void testActionsOnUpdatedRecordTypeBinaryNoIncomingLinks() {
		RecordStorageCreateUpdateSpy recordStorage = new RecordStorageCreateUpdateSpy();
		setRecordUpdaterWithrecordStorage(recordStorage);

		SpiderDataGroup dataGroup = createRecordTypeDataGroupWithIdAndAbstract("binary", "false");

		SpiderDataRecord recordUpdated = recordUpdater.updateRecord("userId", "recordType",
				"binary", dataGroup);
		assertEquals(recordUpdated.getActions().size(), 6);
		assertReadUpdateDelete(recordUpdated);

		assertTrue(recordUpdated.getActions().contains(Action.LIST));
		assertTrue(recordUpdated.getActions().contains(Action.SEARCH));
		assertTrue(recordUpdated.getActions().contains(Action.CREATE_BY_UPLOAD));
	}

	@Test(expectedExceptions = RecordNotFoundException.class)
	public void testUpdateNotFound() {
		SpiderDataGroup record = SpiderDataGroup.withNameInData("authority");
		SpiderDataGroup recordInfo = SpiderDataGroup.withNameInData("recordInfo");
		SpiderDataAtomic idData = SpiderDataAtomic.withNameInDataAndValue("id", "NOT_FOUND");
		recordInfo.addChild(idData);
		recordInfo.addChild(SpiderDataAtomic.withNameInDataAndValue("type", "recordType"));
		recordInfo.addChild(SpiderDataAtomic.withNameInDataAndValue("createdBy", "userId"));
		record.addChild(recordInfo);
		recordUpdater.updateRecord("userId", "recordType", "NOT_FOUND", record);
	}

	@Test(expectedExceptions = DataMissingException.class)
	public void testUpdateRecordRecordInfoMissing() {
		RecordStorageCreateUpdateSpy recordStorage = new RecordStorageCreateUpdateSpy();
		setRecordUpdaterWithrecordStorage(recordStorage);

		SpiderDataGroup group = SpiderDataGroup.withNameInData("authority");
		recordUpdater.updateRecord("userId", "typeWithAutoGeneratedId", "place", group);
	}

	@Test(expectedExceptions = DataMissingException.class)
	public void testUpdateRecordRecordInfoContentMissing() {
		RecordStorageCreateUpdateSpy recordStorage = new RecordStorageCreateUpdateSpy();
		setRecordUpdaterWithrecordStorage(recordStorage);

		SpiderDataGroup group = SpiderDataGroup.withNameInData("authority");
		SpiderDataGroup createRecordInfo = SpiderDataGroup.withNameInData("recordInfo");
		group.addChild(createRecordInfo);
		recordUpdater.updateRecord("userId", "typeWithAutoGeneratedId", "place", group);
	}

	@Test(expectedExceptions = DataException.class)
	public void testUpdateRecordInvalidData() {
		DataValidator dataValidator = new DataValidatorAlwaysInvalidSpy();
		RecordStorageCreateUpdateSpy recordStorage = new RecordStorageCreateUpdateSpy();
		SpiderRecordUpdater recordUpdater = SpiderRecordUpdaterImp
				.usingAuthorizationAndDataValidatorAndRecordStorageAndKeyCalculatorAndLinkCollector(
						authorization, dataValidator, recordStorage, keyCalculator, linkCollector);

		SpiderDataGroup dataGroup = SpiderDataGroup.withNameInData("typeWithUserGeneratedId");
		SpiderDataGroup createRecordInfo = SpiderDataGroup.withNameInData("recordInfo");
		createRecordInfo.addChild(SpiderDataAtomic.withNameInDataAndValue("id", "place"));
		createRecordInfo.addChild(SpiderDataAtomic.withNameInDataAndValue("type", "recordType"));
		dataGroup.addChild(createRecordInfo);
		dataGroup.addChild(SpiderDataAtomic.withNameInDataAndValue("atomicId", "atomicValue"));

		recordUpdater.updateRecord("userId", "typeWithAutoGeneratedId", "place", dataGroup);
	}

	@Test(expectedExceptions = RecordNotFoundException.class)
	public void testNonExistingRecordType() {
		SpiderDataGroup record = SpiderDataGroup.withNameInData("authority");
		recordUpdater.updateRecord("userId", "recordType_NOT_EXISTING", "id", record);
	}

	@Test(expectedExceptions = DataException.class)
	public void testUpdateRecordIncomingNameInDatasDoNotMatch() {
		RecordStorageCreateUpdateSpy recordStorage = new RecordStorageCreateUpdateSpy();
		SpiderRecordUpdater recordUpdater = SpiderRecordUpdaterImp
				.usingAuthorizationAndDataValidatorAndRecordStorageAndKeyCalculatorAndLinkCollector(
						authorization, dataValidator, recordStorage, keyCalculator, linkCollector);

		SpiderDataGroup dataGroup = SpiderDataGroup.withNameInData("typeWithUserGeneratedId");
		SpiderDataGroup createRecordInfo = SpiderDataGroup.withNameInData("recordInfo");
		createRecordInfo.addChild(SpiderDataAtomic.withNameInDataAndValue("id", "place"));
		createRecordInfo.addChild(SpiderDataAtomic.withNameInDataAndValue("type", "recordType"));
		dataGroup.addChild(createRecordInfo);
		dataGroup.addChild(SpiderDataAtomic.withNameInDataAndValue("atomicId", "atomicValue"));

		recordUpdater.updateRecord("userId", "typeWithAutoGeneratedId", "place_NOT_THE_SAME",
				dataGroup);
	}

	@Test(expectedExceptions = DataException.class)
	public void testUpdateRecordIncomingDataTypesDoNotMatch() {
		RecordStorageCreateUpdateSpy recordStorage = new RecordStorageCreateUpdateSpy();
		SpiderRecordUpdater recordUpdater = SpiderRecordUpdaterImp
				.usingAuthorizationAndDataValidatorAndRecordStorageAndKeyCalculatorAndLinkCollector(
						authorization, dataValidator, recordStorage, keyCalculator, linkCollector);

		SpiderDataGroup dataGroup = SpiderDataGroup
				.withNameInData("typeWithUserGeneratedId_NOT_THE_SAME");
		SpiderDataGroup createRecordInfo = SpiderDataGroup.withNameInData("recordInfo");
		createRecordInfo.addChild(SpiderDataAtomic.withNameInDataAndValue("id", "place"));
		createRecordInfo.addChild(SpiderDataAtomic.withNameInDataAndValue("type", "recordType"));
		dataGroup.addChild(createRecordInfo);
		dataGroup.addChild(SpiderDataAtomic.withNameInDataAndValue("atomicId", "atomicValue"));

		recordUpdater.updateRecord("userId", "typeWithAutoGeneratedId", "place", dataGroup);
	}

	@Test(expectedExceptions = MisuseException.class)
	public void testUpdateRecordAbstractRecordType() {
		SpiderRecordUpdater recordUpdater = SpiderRecordUpdaterImp
				.usingAuthorizationAndDataValidatorAndRecordStorageAndKeyCalculatorAndLinkCollector(
						authorization, dataValidator, new RecordStorageSpy(), keyCalculator,
						linkCollector);

		SpiderDataGroup record = SpiderDataGroup.withNameInData("abstract");
		recordUpdater.updateRecord("userId", "abstract", "xxx", record);
	}

	@Test(expectedExceptions = AuthorizationException.class)
	public void testUpdateRecordUserNotAuthorisedToStoreIncomingData() {

		SpiderRecordUpdater recordUpdater = setupWithUserAuthorizedForUppsala();

		SpiderDataGroup dataGroup = SpiderDataGroup.withNameInData("typeWithUserGeneratedId");
		SpiderDataGroup createRecordInfo = SpiderDataGroup.withNameInData("recordInfo");
		createRecordInfo.addChild(SpiderDataAtomic.withNameInDataAndValue("id", "uppsalaRecord1"));
		createRecordInfo.addChild(
				SpiderDataAtomic.withNameInDataAndValue("type", "typeWithUserGeneratedId"));
		dataGroup.addChild(createRecordInfo);
		dataGroup.addChild(SpiderDataAtomic.withNameInDataAndValue("unit", "gothenburg"));
		recordUpdater.updateRecord("userId", "typeWithUserGeneratedId", "uppsalaRecord1",
				dataGroup);
	}

	private SpiderRecordUpdater setupWithUserAuthorizedForUppsala() {
		RecordStorageCreateUpdateSpy recordStorage = new RecordStorageCreateUpdateSpy();
		PermissionKeyCalculator testKeyCalculator = new KeyCalculatorTest();
		Authorizator testAuthorizator = new AuthorisedForUppsala();

		SpiderRecordUpdater recordUpdater = SpiderRecordUpdaterImp
				.usingAuthorizationAndDataValidatorAndRecordStorageAndKeyCalculatorAndLinkCollector(
						testAuthorizator, dataValidator, recordStorage, testKeyCalculator,
						linkCollector);
		return recordUpdater;
	}

	@Test(expectedExceptions = AuthorizationException.class)
	public void testUpdateRecordUserNotAuthorisedToUpdateData() {

		SpiderRecordUpdater recordUpdater = setupWithUserAuthorizedForUppsala();

		SpiderDataGroup dataGroup = SpiderDataGroup.withNameInData("typeWithUserGeneratedId");
		SpiderDataGroup createRecordInfo = SpiderDataGroup.withNameInData("recordInfo");
		createRecordInfo
				.addChild(SpiderDataAtomic.withNameInDataAndValue("id", "gothenburgRecord1"));
		createRecordInfo.addChild(
				SpiderDataAtomic.withNameInDataAndValue("type", "typeWithUserGeneratedId"));
		dataGroup.addChild(createRecordInfo);
		dataGroup.addChild(SpiderDataAtomic.withNameInDataAndValue("unit", "uppsala"));
		recordUpdater.updateRecord("userId", "typeWithUserGeneratedId", "gothenburgRecord1",
				dataGroup);
	}

	@Test
	public void testUpdateRecordWithDataRecordLinkHasReadActionTopLevel() {
		SpiderDataGroup dataGroup = RecordLinkTestsDataCreator
				.createSpiderDataGroupWithRecordInfoAndLink();

		SpiderRecordUpdater recordUpdater = createRecordUpdaterWithTestDataForLinkedData();
		SpiderDataRecord record = recordUpdater.updateRecord("userId", "dataWithLinks",
				"oneLinkTopLevel", dataGroup);

		RecordLinkTestsAsserter.assertTopLevelLinkContainsReadActionOnly(record);
	}

	private SpiderRecordUpdater createRecordUpdaterWithTestDataForLinkedData() {
		recordStorage = new RecordLinkTestsRecordStorage();
		return SpiderRecordUpdaterImp
				.usingAuthorizationAndDataValidatorAndRecordStorageAndKeyCalculatorAndLinkCollector(
						authorization, dataValidator, recordStorage, keyCalculator, linkCollector);
	}

	@Test
	public void testUpdateRecordWithDataRecordLinkHasReadActionOneLevelDown() {
		SpiderDataGroup dataGroup = RecordLinkTestsDataCreator
				.createDataGroupWithRecordInfoAndLinkOneLevelDown();

		SpiderRecordUpdater recordUpdater = createRecordUpdaterWithTestDataForLinkedData();
		SpiderDataRecord record = recordUpdater.updateRecord("userId", "dataWithLinks",
				"oneLinkOneLevelDown", dataGroup);

		RecordLinkTestsAsserter.assertOneLevelDownLinkContainsReadActionOnly(record);
	}

}
