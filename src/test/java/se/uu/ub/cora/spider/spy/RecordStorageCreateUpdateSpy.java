/*
 * Copyright 2015, 2022 Uppsala University Library
 *
 * This file is part of Cora.
 *
 *     Cora is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     Cora is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with Cora.  If not, see <http://www.gnu.org/licenses/>.
 */

package se.uu.ub.cora.spider.spy;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.function.Supplier;

import se.uu.ub.cora.data.DataGroup;
import se.uu.ub.cora.data.DataRecordGroup;
import se.uu.ub.cora.data.DataRecordLink;
import se.uu.ub.cora.data.collected.Link;
import se.uu.ub.cora.data.collected.StorageTerm;
import se.uu.ub.cora.data.spies.DataRecordLinkSpy;
import se.uu.ub.cora.spider.data.DataAtomicOldSpy;
import se.uu.ub.cora.spider.data.DataGroupOldSpy;
import se.uu.ub.cora.spider.testdata.DataCreator2;
import se.uu.ub.cora.storage.Filter;
import se.uu.ub.cora.storage.RecordNotFoundException;
import se.uu.ub.cora.storage.RecordStorage;
import se.uu.ub.cora.storage.StorageReadResult;
import se.uu.ub.cora.testutils.mcr.MethodCallRecorder;

public class RecordStorageCreateUpdateSpy implements RecordStorage {
	private static final String METADATA = "metadata";
	public MethodCallRecorder MCR = new MethodCallRecorder();
	public DataGroup createRecord;
	public DataGroup updateRecord;
	public String dataDivider;
	public boolean createWasCalled = false;

	public boolean modifiableLinksExistsForRecord = false;
	public DataGroup group;
	public String type;
	public String id;
	public Set<StorageTerm> storageTerms;

	@Override
	public DataGroup read(List<String> types, String id) {
		MCR.addCall("types", types, "id", id);
		for (String type : types) {

			if (type.equals("recordType") && id.equals("typeWithAutoGeneratedId")) {
				DataGroup group = new DataGroupOldSpy("recordType");
				addMetadataIdAndMetadataIdNew(group, "place", "placeNew");
				group.addChild(new DataAtomicOldSpy("userSuppliedId", "false"));
				group.addChild(new DataAtomicOldSpy("abstract", "false"));
				MCR.addReturned(group);
				return group;
			}
			if (type.equals("recordType") && id.equals("typeWithUserGeneratedId")) {
				DataGroup group = new DataGroupOldSpy("recordType");
				addMetadataIdAndMetadataIdNew(group, "place", "placeNew");
				group.addChild(new DataAtomicOldSpy("userSuppliedId", "true"));
				group.addChild(new DataAtomicOldSpy("abstract", "false"));
				MCR.addReturned(group);
				return group;
			}
			if (type.equals("typeWithAutoGeneratedId") && id.equals("somePlace")) {
				if (null == group) {
					group = new DataGroupOldSpy("typeWithAutoGeneratedId");
					createAndAddRecordInfo(group);

					addMetadataIdAndMetadataIdNew(group, "place", "placeNew");
					group.addChild(new DataAtomicOldSpy("userSuppliedId", "true"));
					group.addChild(new DataAtomicOldSpy("abstract", "false"));
					group.addChild(new DataAtomicOldSpy("unit", "Uppsala"));
					group.addChild(new DataGroupOldSpy("recordInfo"));
				}
				MCR.addReturned(group);
				return group;
			}
			if (type.equals("typeWithUserGeneratedId") && id.equals("uppsalaRecord1")) {
				DataGroup group = new DataGroupOldSpy("typeWithUserGeneratedId");
				addMetadataIdAndMetadataIdNew(group, "place", "placeNew");
				group.addChild(new DataAtomicOldSpy("userSuppliedId", "true"));
				group.addChild(new DataAtomicOldSpy("abstract", "false"));
				group.addChild(new DataAtomicOldSpy("unit", "Uppsala"));
				group.addChild(new DataGroupOldSpy("recordInfo"));
				MCR.addReturned(group);
				return group;
			}
			if (type.equals("typeWithUserGeneratedId") && id.equals("gothenburgRecord1")) {
				DataGroup group = new DataGroupOldSpy("typeWithUserGeneratedId");
				addMetadataIdAndMetadataIdNew(group, "place", "placeNew");
				group.addChild(new DataAtomicOldSpy("userSuppliedId", "true"));
				group.addChild(new DataAtomicOldSpy("abstract", "false"));
				group.addChild(new DataAtomicOldSpy("unit", "gothenburg"));
				group.addChild(new DataGroupOldSpy("recordInfo"));
				MCR.addReturned(group);
				return group;
			}
			if (type.equals("recordType") && id.equals("recordType")) {
				DataGroup group = new DataGroupOldSpy("recordType");
				addMetadataIdAndMetadataIdNew(group, "recordType", "recordTypeNew");
				group.addChild(new DataAtomicOldSpy("recordInfo", "recordInfo"));
				group.addChild(new DataAtomicOldSpy("userSuppliedId", "true"));
				group.addChild(new DataAtomicOldSpy("abstract", "false"));
				group.addChild(new DataGroupOldSpy("recordInfo"));
				MCR.addReturned(group);
				return group;
			}
			if (type.equals("recordType") && id.equals("image")) {
				DataGroup group = new DataGroupOldSpy("recordType");
				addMetadataIdAndMetadataIdNew(group, "image", "imageNew");
				group.addChild(new DataAtomicOldSpy("userSuppliedId", "true"));
				group.addChild(new DataAtomicOldSpy("abstract", "false"));
				group.addChild(new DataGroupOldSpy("recordInfo"));

				DataRecordLinkSpy linkSpy = new DataRecordLinkSpy();
				linkSpy.MRV.setDefaultReturnValuesSupplier("getNameInData",
						(Supplier<String>) () -> "parentId");
				linkSpy.MRV.setDefaultReturnValuesSupplier("getLinkedRecordId",
						(Supplier<String>) () -> "binary");
				group.addChild(linkSpy);
				MCR.addReturned(group);
				return group;
			}
			if (id.equals("binary")) {
				DataGroup group = new DataGroupOldSpy("recordType");
				addMetadataIdAndMetadataIdNew(group, "binary", "binaryNew");
				group.addChild(new DataAtomicOldSpy("userSuppliedId", "true"));
				group.addChild(new DataAtomicOldSpy("abstract", "true"));
				group.addChild(new DataGroupOldSpy("recordInfo"));
				MCR.addReturned(group);
				return group;
			}
			if (id.equals("metadataGroup")) {
				DataGroup group = new DataGroupOldSpy(METADATA);
				addMetadataIdAndMetadataIdNew(group, "metadataGroupGroup", "metadataGroupNewGroup");
				group.addChild(new DataAtomicOldSpy("userSuppliedId", "true"));
				group.addChild(new DataAtomicOldSpy("abstract", "false"));
				group.addChild(new DataGroupOldSpy("recordInfo"));
				MCR.addReturned(group);
				return group;
			}
			if (id.equals("metadataCollectionVariable")) {
				DataGroup group = new DataGroupOldSpy(METADATA);
				addMetadataIdAndMetadataIdNew(group, "metadataCollectionVariableGroup",
						"metadataCollectionVariableNewGroup");
				group.addChild(new DataAtomicOldSpy("userSuppliedId", "true"));
				group.addChild(new DataAtomicOldSpy("abstract", "false"));
				group.addChild(new DataGroupOldSpy("recordInfo"));
				MCR.addReturned(group);
				return group;
			}
			if (id.equals("metadataRecordLink")) {
				DataGroup group = new DataGroupOldSpy(METADATA);
				addMetadataIdAndMetadataIdNew(group, "metadataRecordLinkGroup",
						"metadataRecordLinkNewGroup");
				group.addChild(new DataAtomicOldSpy("userSuppliedId", "true"));
				group.addChild(new DataAtomicOldSpy("abstract", "false"));
				group.addChild(new DataGroupOldSpy("recordInfo"));
				MCR.addReturned(group);
				return group;
			}
			if (id.equals("typeWithAutoGeneratedIdWrongRecordInfo")) {
				DataGroup group = new DataGroupOldSpy("recordType");
				addMetadataIdAndMetadataIdNew(group, "typeWithAutoGeneratedIdWrongRecordInfo",
						"typeWithAutoGeneratedIdWrongRecordInfoGroup");
				group.addChild(new DataAtomicOldSpy("userSuppliedId", "false"));
				group.addChild(new DataAtomicOldSpy("abstract", "false"));
				MCR.addReturned(group);

				return group;
			}
			if (id.equals("testGroup")) {
				DataGroup group = new DataGroupOldSpy("testGroup");

				DataGroup childReferences = new DataGroupOldSpy("childReferences");
				childReferences.addChild(createChildReference("childOne", "1", "1"));
				group.addChild(childReferences);
				group.addChild(new DataGroupOldSpy("recordInfo"));
				MCR.addReturned(group);
				return group;
			}
			if (id.equals("childOne")) {
				DataGroup group = new DataGroupOldSpy(METADATA);
				group.addChild(new DataAtomicOldSpy("nameInData", "childOne"));
				MCR.addReturned(group);
				return group;
			}
			if (id.equals("childTwo")) {
				DataGroup group = new DataGroupOldSpy(METADATA);
				group.addChild(new DataAtomicOldSpy("nameInData", "childTwo"));
				group.addChild(new DataGroupOldSpy("recordInfo"));
				MCR.addReturned(group);
				return group;
			}

			if (id.equals("testGroupWithOneChild")) {
				DataGroup group = new DataGroupOldSpy("testGroupWithOneChild");
				group.addChild(new DataGroupOldSpy("recordInfo"));

				DataGroup childReferences = new DataGroupOldSpy("childReferences");
				childReferences.addChild(createChildReference("childOne", "1", "1"));
				group.addChild(childReferences);
				MCR.addReturned(group);
				return group;
			}
			if (id.equals("testGroupWithTwoChildren")) {
				DataGroup group = new DataGroupOldSpy("testGroupWithTwoChildren");
				group.addChild(new DataGroupOldSpy("recordInfo"));

				DataGroup childReferences = new DataGroupOldSpy("childReferences");
				childReferences.addChild(createChildReference("childOne", "1", "1"));
				childReferences.addChild(
						createChildReference("childWithSameNameInDataAsChildTwo", "0", "1"));
				group.addChild(childReferences);
				MCR.addReturned(group);
				return group;
			}
			if (id.equals("testGroupWithThreeChildren")) {
				DataGroup group = new DataGroupOldSpy("testGroupWithTwoChildren");
				group.addChild(new DataGroupOldSpy("recordInfo"));

				DataGroup childReferences = new DataGroupOldSpy("childReferences");
				childReferences.addChild(createChildReference("childOne", "1", "1"));
				childReferences.addChild(createChildReference("childTwo", "0", "1"));
				childReferences.addChild(createChildReference("childThree", "1", "1"));
				group.addChild(childReferences);
				MCR.addReturned(group);
				return group;
			}
			if (id.equals("childWithSameNameInDataAsChildTwo")) {
				// name in data is not same as id to test same scenario as
				// recordInfoGroup/recordInfoNewGroup
				// different id, same name in data
				DataGroup group = new DataGroupOldSpy(METADATA);
				group.addChild(new DataGroupOldSpy("recordInfo"));
				group.addChild(new DataAtomicOldSpy("nameInData", "childTwo"));
				MCR.addReturned(group);
				return group;
			}
			if (id.equals("childThree")) {
				throw RecordNotFoundException
						.withMessage("No record exists with recordId: childThree");
			}

			if (id.equals("testItemCollection")) {
				DataGroup group = new DataGroupOldSpy(METADATA);

				DataGroup itemReferences = new DataGroupOldSpy("collectionItemReferences");

				createAndAddItemReference(itemReferences, "thisItem", "one");
				createAndAddItemReference(itemReferences, "thatItem", "two");

				group.addChild(itemReferences);
				MCR.addReturned(group);
				return group;
			}
			if (id.equals("testParentMissingItemCollectionVar")) {
				DataGroup group = new DataGroupOldSpy(METADATA);
				group.addChild(new DataGroupOldSpy("recordInfo"));
				group.addChild(DataCreator2.createLinkWithLinkedId("refCollection", METADATA,
						"testParentMissingItemCollection"));
				MCR.addReturned(group);

				return group;
			}
			if (id.equals("testParentMissingItemCollection")) {
				DataGroup group = new DataGroupOldSpy(METADATA);
				group.addChild(new DataGroupOldSpy("recordInfo"));

				DataGroup itemReferences = new DataGroupOldSpy("collectionItemReferences");

				createAndAddItemReference(itemReferences, "thisItem", "one");
				createAndAddItemReference(itemReferences, "thoseItem", "two");
				group.addChild(itemReferences);
				MCR.addReturned(group);
				return group;
			}
			if (id.equals("testParentCollectionVar")) {
				DataGroup group = new DataGroupOldSpy(METADATA);
				group.addChild(new DataGroupOldSpy("recordInfo"));
				group.addChild(DataCreator2.createLinkWithLinkedId("refCollection", METADATA,
						"testParentItemCollection"));
				MCR.addReturned(group);
				return group;
			}
			if (id.equals("testParentItemCollection")) {
				DataGroup group = new DataGroupOldSpy(METADATA);
				group.addChild(new DataGroupOldSpy("recordInfo"));

				DataGroup itemReferences = new DataGroupOldSpy("collectionItemReferences");

				createAndAddItemReference(itemReferences, "thisItem", "one");
				createAndAddItemReference(itemReferences, "thatItem", "two");
				createAndAddItemReference(itemReferences, "thoseItem", "three");

				group.addChild(itemReferences);
				MCR.addReturned(group);
				return group;
			}
			if (id.equals("thisItem")) {
				DataGroup group = new DataGroupOldSpy(METADATA);
				group.addChild(new DataGroupOldSpy("recordInfo"));
				group.addChild(new DataAtomicOldSpy("nameInData", "this"));
				MCR.addReturned(group);
				return group;
			}
			if (id.equals("thatItem")) {
				DataGroup group = new DataGroupOldSpy(METADATA);
				group.addChild(new DataGroupOldSpy("recordInfo"));
				group.addChild(new DataAtomicOldSpy("nameInData", "that"));
				MCR.addReturned(group);
				return group;
			}
			if ("image".equals(type) && "image:123456789".equals(id)) {
				DataGroup group = DataCreator2.createRecordWithNameInDataAndIdAndLinkedRecordId(
						"image", "image:123456789", "cora");
				MCR.addReturned(group);
				return group;
			}
		}
		DataGroup dataGroupToReturn = new DataGroupOldSpy("someNameInData");
		createAndAddRecordInfo(dataGroupToReturn);
		MCR.addReturned(dataGroupToReturn);
		return dataGroupToReturn;
	}

	private void createAndAddRecordInfo(DataGroup group) {
		DataGroup recordInfo = new DataGroupOldSpy("recordInfo");
		DataGroup createdBy = new DataGroupOldSpy("createdBy");
		createdBy.addChild(new DataAtomicOldSpy("linkedRecordType", "user"));
		createdBy.addChild(new DataAtomicOldSpy("linkedRecordId", "6789"));
		recordInfo.addChild(createdBy);
		recordInfo.addChild(new DataAtomicOldSpy("tsCreated", "2016-10-01T00:00:00.000000Z"));
		group.addChild(recordInfo);
	}

	private void addMetadataIdAndMetadataIdNew(DataGroup group, String metadataId,
			String metadataIdNew) {
		group.addChild(createLinkWithLinkedId("newMetadataId", "metadataGroup", metadataId));
		group.addChild(createLinkWithLinkedId("metadataId", "metadataGroup", metadataIdNew));
	}

	private DataGroup createChildReference(String refId, String repeatMin, String repeatMax) {
		DataGroup childReference = new DataGroupOldSpy("childReference");
		childReference.addChild(createLinkWithLinkedId("ref", METADATA, refId));
		childReference.addChild(new DataAtomicOldSpy("repeatMin", repeatMin));
		childReference.addChild(new DataAtomicOldSpy("repeatMax", repeatMax));
		return childReference;
	}

	private static DataRecordLink createLinkWithLinkedId(String nameInData, String linkedRecordType,
			String id) {
		DataRecordLinkSpy linkSpy = new DataRecordLinkSpy();
		linkSpy.MRV.setDefaultReturnValuesSupplier("getNameInData",
				(Supplier<String>) () -> nameInData);
		linkSpy.MRV.setDefaultReturnValuesSupplier("getLinkedRecordId",
				(Supplier<String>) () -> id);
		return linkSpy;
	}

	private void createAndAddItemReference(DataGroup collectionItemReferences,
			String linkedRecordId, String repeatId) {

		DataRecordLinkSpy link = (DataRecordLinkSpy) createLinkWithLinkedId("ref", METADATA,
				linkedRecordId);
		link.MRV.setDefaultReturnValuesSupplier("getRepeatId", () -> repeatId);
		collectionItemReferences.addChild(link);
	}

	@Override
	public void create(String type, String id, DataGroup record, Set<StorageTerm> storageTerms,
			Set<Link> links, String dataDivider) {
		this.type = type;
		this.id = id;
		createRecord = record;
		this.storageTerms = storageTerms;
		this.dataDivider = dataDivider;
		createWasCalled = true;
	}

	@Override
	public void deleteByTypeAndId(String type, String id) {
		// TODO Auto-generated method stub

	}

	@Override
	public boolean linksExistForRecord(String type, String id) {
		return modifiableLinksExistsForRecord;
	}

	@Override
	public void update(String type, String id, DataGroup record, Set<StorageTerm> storageTerms,
			Set<Link> links, String dataDivider) {
		updateRecord = record;
		this.storageTerms = storageTerms;
		this.dataDivider = dataDivider;
	}

	@Override
	public StorageReadResult readList(List<String> type, Filter filter) {
		ArrayList<DataGroup> recordTypeList = new ArrayList<>();

		DataGroup metadataGroup = new DataGroupOldSpy("recordType");
		DataGroup recordInfo = new DataGroupOldSpy("recordInfo");
		recordInfo.addChild(new DataAtomicOldSpy("id", METADATA));
		metadataGroup.addChild(recordInfo);
		recordTypeList.add(metadataGroup);

		DataGroup metadataGroupGroup = new DataGroupOldSpy("recordType");
		DataGroup recordInfoMetadataGroup = new DataGroupOldSpy("recordInfo");
		recordInfoMetadataGroup.addChild(new DataAtomicOldSpy("id", "metadataGroup"));
		metadataGroupGroup.addChild(recordInfoMetadataGroup);
		metadataGroupGroup.addChild(createLinkWithLinkedId("parentId", "recordType", "binary"));
		recordTypeList.add(metadataGroupGroup);

		DataGroup metadataTextVariable = new DataGroupOldSpy("recordType");
		DataGroup recordInfoTextVariable = new DataGroupOldSpy("recordInfo");
		recordInfoTextVariable.addChild(new DataAtomicOldSpy("id", "metadataTextVariable"));
		metadataTextVariable.addChild(recordInfoTextVariable);
		metadataTextVariable.addChild(createLinkWithLinkedId("parentId", "recordType", "binary"));
		recordTypeList.add(metadataTextVariable);

		DataGroup presentationVar = new DataGroupOldSpy("recordType");
		DataGroup recordInfoPresentationVar = new DataGroupOldSpy("recordInfo");
		recordInfoPresentationVar.addChild(new DataAtomicOldSpy("id", "presentationVar"));
		presentationVar.addChild(createLinkWithLinkedId("parentId", "recordType", "binary"));
		presentationVar.addChild(recordInfoTextVariable);

		recordTypeList.add(presentationVar);
		StorageReadResult spiderReadResult = new StorageReadResult();
		spiderReadResult.listOfDataGroups = recordTypeList;
		return spiderReadResult;

	}

	@Override
	public Set<Link> getLinksToRecord(String type, String id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean recordExists(List<String> types, String id) {
		return false;
	}

	@Override
	public long getTotalNumberOfRecordsForTypes(List<String> types, Filter filter) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public DataRecordGroup read(String type, String id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public StorageReadResult readList(String type, Filter filter) {
		// TODO Auto-generated method stub
		return null;
	}
}
